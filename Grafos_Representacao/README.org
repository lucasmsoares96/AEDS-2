#+TITLE: Representação de Grafos
#+DESCRIPTION: desenvolver e analisar as três formas de representação de grafos(Lista de Adjacência, Matriz de Adjacência e Matriz de Incidência) e as suas respectivas buscas em largura(BFS) e em profundidade(DFS)
#+AUTHOR: Lucas Martins Soares

* Apresentação
Esse projeto foi desenvolvido na disciplina de Algoritmos e Estruturas de Dados 2 no curso de Engenharia de Computação no CEFET-MG Campus Divinópolis. O seu objetivo foi desenvolver e analisar as três formas de representação de grafos(Lista de Adjacência, Matriz de Adjacência e Matriz de Incidência) e as suas respectivas buscas em largura(BFS) e em profundidade(DFS). Foi utilizado como referência o código de Lista de Adjacência apresentado em sala e o Livro de Algoritmos do Tomas H.
Cormen.

Lucas Martins Soares

* Índice :toc:
- [[#apresentação][Apresentação]]
- [[#execução][Execução]]
- [[#introdução][Introdução]]
- [[#estruturas-de-representação][Estruturas de Representação]]
  - [[#lista-de-adjacência][Lista de Adjacência]]
  - [[#matriz-de-adjacência][Matriz de Adjacência]]
  - [[#matriz-de-incidência][Matriz de Incidência]]
- [[#algoritmos-de-busca][Algoritmos de Busca]]
- [[#implementação][Implementação]]
- [[#comparação][Comparação]]
  - [[#lista-de-adjacência-1][Lista de Adjacência]]
  - [[#matriz-de-adjacência-1][Matriz de Adjacência]]
  - [[#matriz-de-incidência-1][Matriz de Incidência]]
- [[#conclusões][Conclusões]]

* Execução
Para executar o projeto primeiro clone o repositório:

#+begin_src shell
  git clone https://github.com/lucasmsoares96/representacaoDeGrafos.git
#+end_src

Em seguida entre na pasta de um modo de representação, compile e execute:

#+begin_src shell
  cd ListaDeAjacencia
  gcc *.c -o main && ./main
#+end_src

* Introdução
Durante essa análise, entramos com o grafo abaixo nas 3 formas de representação e analisamos o seu funcionamento nos algoritmos de busca BFS e DFS do livro do Cormen:

#+begin_src
0,1,2,
1,0,4,2,1,
2,2,3,
3,9,0,
4,9,5,
5,2,0,2,
6,1,9,2,
7,7,5,7,
8,2,
9,2,5,
#+end_src

* Estruturas de Representação
** Lista de Adjacência
A Lista de Adjacência possui um vetor com todos os vértices e em cada posição desse vetor temos um ponteiro para uma lista simplesmente encadeada que armazena os vértices que estão conectados ao vértice correspondente à posição do vetor:

#+begin_src
[ 0]->  1->  2-> 
[ 1]->  0->  4->  2-> 
[ 2]->  2->  3-> 
[ 3]->  9->  0-> 
[ 4]->  9->  5-> 
[ 5]->  2->  0-> 
[ 6]->  1->  9->  2-> 
[ 7]->  7->  5-> 
[ 8]->  2-> 
[ 9]->  2->  5-> 
#+end_src

A Lista de Adjacência consegue representar grafos orientados como podemos perceber que o vértice 0 está ligado ao vértice 1 e vice-versa. Podemos perceber que a Lista de Adjacência consegue representar laços analisado o vértice 7. O seu consumo de memória é baixo por que não é preciso armazenar os dados dos vértices que não fazem conexão com o vértice analisado.

** Matriz de Adjacência
A Matriz de Adjacência possui os vértices de origem nas linhas e os vértices de destino nas suas colunas. E cada célula representa uma aresta

#+begin_src
       [ 0][ 1][ 2][ 3][ 4][ 5][ 6][ 7][ 8][ 9]
        |   |   |   |   |   |   |   |   |   |  
        V   V   V   V   V   V   V   V   V   V  
[ 0]-> [  ][ 1][ 1][  ][  ][  ][  ][  ][  ][  ]
[ 1]-> [ 1][  ][ 1][  ][ 1][  ][  ][  ][  ][  ]
[ 2]-> [  ][  ][ 1][ 1][  ][  ][  ][  ][  ][  ]
[ 3]-> [ 1][  ][  ][  ][  ][  ][  ][  ][  ][ 1]
[ 4]-> [  ][  ][  ][  ][  ][ 1][  ][  ][  ][ 1]
[ 5]-> [ 1][  ][ 1][  ][  ][  ][  ][  ][  ][  ]
[ 6]-> [  ][ 1][ 1][  ][  ][  ][  ][  ][  ][ 1]
[ 7]-> [  ][  ][  ][  ][  ][ 1][  ][ 1][  ][  ]
[ 8]-> [  ][  ][ 1][  ][  ][  ][  ][  ][  ][  ]
[ 9]-> [  ][  ][ 1][  ][  ][ 1][  ][  ][  ][  ]
#+end_src

A Matriz de Adjacência consegue representar grafos orientados como podemos perceber que o vértice 0 está ligado ao vértice 1 e vice-versa. O vértice 7 possui 2 laços, e podemos perceber que a Lista de Adjacência consegue representar laços mas não consegue representar arestas múltiplas. E o seu consumo de memória é maior que o da Lista de Adjacência por que é preciso armazenar os dados dos vértices que não fazem conexão com o vértice analisado.

** Matriz de Incidência

A Matriz de Incidência possui suas linhas correspondendo aos vértices e as suas colunas correspondendo as arestas. Cada célula com 1 significa que a aresta está saíndo do vértice e com -1 que está entrando no vértice.

#+begin_src
       [ 0][ 1][ 2][ 3][ 4][ 5][ 6][ 7][ 8][ 9][10][11][12][13][14][15][16][17][18][19][20][21][22]
        |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |  
        V   V   V   V   V   V   V   V   V   V   V   V   V   V   V   V   V   V   V   V   V   V   V  
[ 0]-> [ 1][ 1][-1][  ][  ][  ][  ][  ][-1][  ][  ][  ][-1][  ][  ][  ][  ][  ][  ][  ][  ][  ][  ]
[ 1]-> [-1][  ][ 1][ 1][ 1][  ][  ][  ][  ][  ][  ][  ][  ][  ][-1][  ][  ][  ][  ][  ][  ][  ][  ]
[ 2]-> [  ][-1][  ][  ][-1][ 1][ 1][  ][  ][  ][  ][-1][  ][-1][  ][  ][-1][  ][  ][  ][-1][-1][  ]
[ 3]-> [  ][  ][  ][  ][  ][  ][-1][ 1][ 1][  ][  ][  ][  ][  ][  ][  ][  ][  ][  ][  ][  ][  ][  ]
[ 4]-> [  ][  ][  ][-1][  ][  ][  ][  ][  ][ 1][ 1][  ][  ][  ][  ][  ][  ][  ][  ][  ][  ][  ][  ]
[ 5]-> [  ][  ][  ][  ][  ][  ][  ][  ][  ][  ][-1][ 1][ 1][ 1][  ][  ][  ][  ][-1][  ][  ][  ][-1]
[ 6]-> [  ][  ][  ][  ][  ][  ][  ][  ][  ][  ][  ][  ][  ][  ][ 1][ 1][ 1][  ][  ][  ][  ][  ][  ]
[ 7]-> [  ][  ][  ][  ][  ][  ][  ][  ][  ][  ][  ][  ][  ][  ][  ][  ][  ][ 1][ 1][ 1][  ][  ][  ]
[ 8]-> [  ][  ][  ][  ][  ][  ][  ][  ][  ][  ][  ][  ][  ][  ][  ][  ][  ][  ][  ][  ][ 1][  ][  ]
[ 9]-> [  ][  ][  ][  ][  ][  ][  ][-1][  ][-1][  ][  ][  ][  ][  ][-1][  ][  ][  ][  ][  ][ 1][ 1]
#+end_src

A Matriz de Insciência armazena informações sobre as orientações das arestas como podemos visualizar analisando novamente o vértice 1 e 0. O vértice 0 está ligado ao vértice 1 pela aresta 0 e o vértice 1 está ligado ao vértice 0 pela aresta 3. Além disso ela consegue armazenar arestas múltiplas o que pode ser um critério de seleção em alguns casos. No entanto essa matriz é muito esparsa e gasta muito memória desnecessária.

* Algoritmos de Busca
Existem dois algoritmos de busca em garfos, BFS e DFS. BFS vem da sigla em inglês Breadth First Search que significa pesquisa primeiro em largura. DFS significa Depth First Search que em português que dizer busca primeiro em profundidade.

*** BFS
O BFS consulta primeiro todos as conexões de um determinado vértice antes de avaliar o próximo. Este algoritmo possui um problema pois quando um vértice não possui conexão com a sequência da busca, ele não é localizado. Os resultado do BFS em todas as estruturas de representação foram os mesmos variando apenas a sequência:

#+begin_src
Vertex:  9
Vertex:  2
Vertex:  5
Vertex:  3
Vertex:  0
Vertex:  1
Vertex:  4
#+end_src

Podemos perceber que os vértices 6,7 e 8 não foram localizados pelo BFS pois nenhum dos vértices anteriores possuíam arestas para eles.

*** DFS
Diferentemente do BFS esse algoritmo quando encontra um novo vértice ele passar a percorrer o novo vértice e só volta a percorrer o vértice anterior quando encerrar a execução do atual. Por isso a melhor forma de desenvolver o DFS é utilizando recursão. O resultado das 3 formas de representações foram iguais:

#+begin_src
Vertex:  3  |  D:  6  |  F:  7
Vertex:  2  |  D:  5  |  F:  8
Vertex:  5  |  D:  9  |  F: 10
Vertex:  9  |  D:  4  |  F: 11
Vertex:  4  |  D:  3  |  F: 12
Vertex:  1  |  D:  2  |  F: 13
Vertex:  0  |  D:  1  |  F: 14
Vertex:  6  |  D: 15  |  F: 16
Vertex:  7  |  D: 17  |  F: 18
Vertex:  8  |  D: 19  |  F: 20
#+end_src

Podemos verificar que os vértices 6,7 e 8 foram localizados pelo DFS mesmo nenhum dos vértices anteriores possuindo arestas para eles

* Implementação

Foi apresentado em sala da aula a implementação do algoritmo da lista de adjacência, e foi pedido que os alunos que realizassem as modificações necessário no código para a Matriz de Adjacência e Matriz de Incidência.

Todas as representações possuem as mesmas funções variando na implementação:

- VertexInitialize
- GraphInitialize
- GraphInsertEdge
- ImprimeGraph
- DFS_VISIT
- DFS
- BFS

Para o funcionamento dos algoritmos BFS e do BFS foi necessário modificar todos as funções citadas anteriormente, no entanto iremos apresentar apenas as alterações dos métodos BFS e DFS

*** BFS
**** Lista de Adjacência
O código do BFS da lista de adjacência foi apresentado em sala da aula e pode ser encontrado no livro de algoritmos do Cormen

 #+begin_src cpp
void BFS(Graph G, Vertex s) {
  int cor[G->V]; // 0 Branco, 1 Cinza, 2 Preto
  int d[G->V];
  int pi[G->V]; // -1 == NULL
  Fila *f = FFVazia();

  for (int i = 0; i < G->V; i++)
    if (i != s->value) {
      cor[i] = 0;
      d[i] = -1;  // infinito
      pi[i] = -1; // ? não tem pai ainda
    }

  cor[s->value] = 1;
  d[s->value] = 0;
  pi[s->value] = -1;

  Queue(f, s->value);

  while (f->size > 0) {
    Item *u = Dequeue(f);
    for (Vertex v = G->adj[u->data]; v != NULL; v = v->prox) {
      if (cor[v->value] == 0) {
        cor[v->value] = 1;
        d[v->value] = d[u->data] + 1;
        pi[v->value] = u->data;
        Queue(f, v->value);
      }
    }

    cor[u->data] = 2;
    printf("Vertex:%3d\n", u->data);
  }
}
#+end_src

**** Matriz de Adjacência
Na Matriz de Adjacência foi preciso fazer algumas alteração na hora de percorrer a estrutura. Devemos percorrer todos os vértices de destino do vértice atual até encontrar um vértice que possui conexão. Estas alterações estão apresentadas abaixo.

#+begin_src cpp
void BFS(Graph G, Vertex s) {
  int cor[G->V];
  int d[G->V];
  int pi[G->V];
  Fila *f = FFVazia();
  for (int i = 0; i < G->V; i++)
    if (i != s->value) {
      cor[i] = 0;
      d[i] = -1;
      pi[i] = -1;
    }
  cor[s->value] = 1;
  d[s->value] = 0;
  pi[s->value] = -1;
  Queue(f, s->value);
  while (f->size > 0) {
    Item *u = Dequeue(f);
    for (int v = 0; v < G->V; v++) {
      // percorrer todos os vértices do vértice atual
      if (G->matrizDeAdjacencia[u->data][v]->value == 1 && cor[v] == 0) {
        // até encontrar um vertice que possui conexão
        cor[v] = 1;
        d[v] = d[u->data] + 1;
        pi[v] = u->data;
        Queue(f, v);
      }
    }
    cor[u->data] = 2;
    printf("Vertex:%3d\n", u->data);
  }
}
#+end_src

**** Matriz de Incidência
Na matriz de Incidência foram feitas as seguintes alterações. Primeiro precisamos percorrer todas as arestas do vértice de destino até encontrar uma aresta que ele possua, ou seja, que esteja marcada com 1. Em seguida devemos percorrer todos os vértices até encontrar o vértice de destino marcados com -1.

#+begin_src cpp
void BFS(Graph G, Vertex s) {
  int cor[G->V];
  int d[G->V];
  int pi[G->V];
  Fila *f = FFVazia();
  for (int i = 0; i < G->V; i++)
    if (i != s->value) {
      cor[i] = 0;
      d[i] = -1;
      pi[i] = -1;
    }
  cor[s->value] = 1;
  d[s->value] = 0;
  pi[s->value] = -1;
  Queue(f, s->value);

  // até aqui se manteve igual à lista de adjacência

  while (f->size > 0) {
    Item *u = Dequeue(f);
    for (int a = 0; a < G->E; a++) {
      // percorrer todas as arestas do vértice de destino
      if (G->matrizDeIncidencia[u->data][a]->value == 1) {
        // até encontrar uma aresta que ele possua
        for (int v = 0; v < G->V; v++) {
          // percorrer todos os vértices
          if (v != u->data && G->matrizDeIncidencia[v][a]->value == -1 &&
              // até encontrar o vértice de destino
              cor[v] == 0) {
            cor[v] = 1;
            d[v] = d[u->data] + 1;
            pi[v] = u->data;
            Queue(f, v);
          }
        }
      }
    }
    cor[u->data] = 2;
    printf("Vertex:%3d\n", u->data);
  }
}
#+end_src

*** DFS
**** Lista de Adjacência
O código do DFS da lista de adjacência foi apresentado em sala da aula e pode ser encontrado no livro de algoritmos do Cormen

 #+begin_src cpp
void DFS_VISIT(Graph G, Vertex v, int *cor, int *d, int *f, int *tempo) {
  cor[v->value] = 1;
  *tempo += 1;
  d[v->value] = *tempo;

  for (Vertex u = G->adj[v->value]; u != NULL; u = u->prox)
    if (cor[u->value] == 0)
      DFS_VISIT(G, u, cor, d, f, tempo);

  cor[v->value] = 2;
  *tempo += 1;
  f[v->value] = *tempo;
  printf("Vertex:%3d  |  D:%3d  |  F:%3d\n", v->value, d[v->value],
         f[v->value]);
}

void DFS(Graph G) {
  int cor[G->V];
  int d[G->V];
  int f[G->V];
  int tempo = 0;

  for (int v = 0; v < G->V; v++)
    cor[v] = 0;

  for (int v = 0; v < G->V; v++)
    if (cor[v] == 0)
      DFS_VISIT(G, G->adj[v], cor, d, f, &tempo);
}
#+end_src

**** Matriz de Adjacência
Na função DFS começamos iterando em todas as linhas, que corresponde aos vértice e enviando aqueles que a cor for branca, que ainda não foram descobertos, para o DFS_VISIT. Essa iteração captura os vértices desconexos que o BFS ignora. Dentro do DFS_VISIT percorremos cada coluna da linha recebida até encontrarmos uma intercessão. Quando encontramos conferimos se a cor é branca e chamamos a recursão novamente.

#+begin_src cpp
void DFS_VISIT(Graph G, Vertex *v, int index, int *cor, int *d, int *f,
               int *tempo) {
  cor[index] = 1;
  , *tempo += 1;
  d[index] = *tempo;
  // percorrer o vetor recebido
  for (int u = 0; u < G->V; u++) {
    // ate até encontrar um vértice com conexão que a cor fosse 0
    if (v[u]->value == 1 && cor[u] == 0) {
      // quando encontrado chamar a recursão novamente
      DFS_VISIT(G, G->matrizDeAdjacencia[u], u, cor, d, f, tempo);
    }
  }
  cor[index] = 2;
  , *tempo += 1;
  f[index] = *tempo;
  printf("Vertex:%3d  |  D:%3d  |  F:%3d\n", index, d[index], f[index]);
}

void DFS(Graph G) {
  int cor[G->V];
  int d[G->V];
  int f[G->V];
  int tempo = 0;
  for (int v = 0; v < G->V; v++)
    cor[v] = 0;
  for (int v = 0; v < G->V; v++)
    if (cor[v] == 0)
      // passamos um vetor do vértice de origem para cada recursão do DFS_VISIT
      DFS_VISIT(G, G->matrizDeAdjacencia[v], v, cor, d, f, &tempo);
}
#+end_src

**** Matriz de Incidência

Assim como na Matriz de Adjacência, na função DFS começamos iterando em todas as linhas, que corresponde as vértice e enviando para o DFS_VISIT aqueles que a cor for branca. Dentro do DFS_VISIT percorremos cada coluna da linha recebida, que corresponde as arestas, até encontrarmos uma intercessão. Depois de encontrarmos a intercessão, precisamos encontrar qual é o vértice de destino dessa aresta. Quando encontramos o vértice de destino, conferimos se a cor é branca e chamamos a recursão novamente.

#+begin_src cpp
void DFS_VISIT(Graph G, Vertex *v, int index, int *cor, int *d, int *f,
               int *tempo) {
  cor[index] = 1;
  , *tempo += 1;
  d[index] = *tempo;
  for (int a = 0; a < G->E; a++) {
    if (v[a]->value == 1) {
      for (int u = 0; u < G->V; u++) {
        if (u != index && G->matrizDeIncidencia[u][a]->value == -1 &&
            cor[u] == 0) {
          DFS_VISIT(G, G->matrizDeIncidencia[u], u, cor, d, f, tempo);
        }
      }
    }
  }
  cor[index] = 2;
  , *tempo += 1;
  f[index] = *tempo;
  printf("Vertex:%3d  |  D:%3d  |  F:%3d\n", index, d[index], f[index]);
}

void DFS(Graph G) {
  int cor[G->V];
  int d[G->V];
  int f[G->V];
  int tempo = 0;
  for (int v = 0; v < G->V; v++)
    cor[v] = 0;
  for (int v = 0; v < G->V; v++)
    // itera todos os vértices
    if (cor[v] == 0)
      // envia para a recursão aqueles que não foram encontrados durante a
      // recursão
      DFS_VISIT(G, G->matrizDeIncidencia[v], v, cor, d, f, &tempo);
}
#+end_src

* Comparação
Para comparar os dados de desempenho para o BFS e DFS nas três estruturas de representação aplicadas em grafos esparsos e densos, foi utilizado o seguinte comando:

#+BEGIN_SRC
gcc *.c -o main && /usr/bin/time -v ./main && time ./main
#+END_SRC

foi testado com os dois comandos /usr/bin/time e time por que o primeiro é o do projeto GNU que apresenta melhor o consumo de memória máximo durante a execução e o segundo é o comando o shell que apresenta melhor o tempo e a sua unidade de medida.

** Lista de Adjacência

| Esparso | BFS           | DFS           |
|---------+---------------+---------------|
| Memória | 1540 kbytes   | 1568 kbytes   |
| Tempo   | 781,00 micros | 944,00 micros |

| Denso   | BFS         | DFS         |
|---------+-------------+-------------|
| Memória | 1736 kbytes | 1692 kbytes |
| Tempo   | 3,41 millis | 3,42 millis |

** Matriz de Adjacência

| Esparso | BFS         | DFS         |
|---------+-------------+-------------|
| Memória | 1824 kbytes | 1864 kbytes |
| Tempo   | 1,78 millis | 1,77 millis |

| Denso   | BFS         | DFS          |
|---------+-------------+--------------|
| Memória | 1904 kbytes | 1928 kbytes  |
| Tempo   | 1,82 millis | 2,20 millis  |

** Matriz de Incidência

| Esparso | BFS         | DFS         |
|---------+-------------+-------------|
| Memória | 3120 kbytes | 3224 kbytes |
| Tempo   | 8,10 millis | 5,85 millis |

| Denso   | BFS           | DFS           |
|---------+---------------+---------------|
| Memória | 42808 kbytes  | 42804 kbytes  |
| Tempo   | 310,05 millis | 315,19 millis |


É possível perceber nas tabelas de comparação acima que tanto o tempo quanto a memória consumida por cada umas das estruturas de representação varia consideravelmente, principalmente na Matriz de Incidência, que foi o mais caro em custo computacional. Já comparando os algoritmos de busca, não houve uma grande variação, em casos o DFS foi mais barato em outros caso foi o BFS.

* Conclusões

Com estas análises podemos concluir que a Lista de Adjacência é mais eficiente tanto no consumo de memória quanto no tempo de execução por isso deve ser escolhida quando o objetivo é obter a estrutura mais eficiente no BFS e DFS. As demais estruturas devem ser utilizadas em situações demandem informações específicas, como a Matriz de Adjacência que armazena arestas múltiplas, ou possibilitam outras formas de busca nos grafos.
